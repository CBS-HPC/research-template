{% raw %}
#!/usr/bin/env python3
# Auto-generated from linting.py.j2

from __future__ import annotations

import argparse
import shlex
import shutil
import subprocess
import sys
from pathlib import Path

# PROJECT ROOT (script is in PROJECT_ROOT/src)
PROJECT_ROOT = Path(__file__).resolve().parents[1]
PY_SRC = PROJECT_ROOT / "src"
TESTS = PROJECT_ROOT / "tests"

def run(cmd):
    if isinstance(cmd, str):
        print(">> " + cmd)
        return subprocess.run(cmd, shell=True).returncode or 0
    else:
        cmd_str = " ".join(map(shlex.quote, cmd))
        print(">> " + cmd_str)
        return subprocess.run(cmd).returncode or 0

def main():
    parser = argparse.ArgumentParser(description="Lint Python with Ruff and Mypy.")
    parser.add_argument("--include-tests", action="store_true", help="Also check ./tests if present.")
    parser.add_argument("--check-only", action="store_true", help="Report only; no file modifications.")
    parser.add_argument("--no-format", action="store_true", help="Skip 'ruff format'.")
    parser.add_argument("--no-fix", action="store_true", help="Skip 'ruff check --fix'.")
    parser.add_argument("--install-types", action="store_true", help="Run 'mypy --install-types' first.")
    parser.add_argument("--mypy-args", default="--pretty --show-error-codes", help="Extra args for mypy.")
    args = parser.parse_args()

    if shutil.which("ruff") is None:
        print("ERROR: Ruff not found. pip install ruff")
        sys.exit(2)
    if shutil.which("mypy") is None:
        print("ERROR: Mypy not found. pip install mypy")
        sys.exit(2)

    targets = [PY_SRC]
    if args.include_tests and TESTS.exists():
        targets.append(TESTS)

    rc_fmt = 0
    if not args.no_format and not args.check_only:
        print("\n[Ruff] format\n")
        rc_fmt = run(["ruff", "format", *map(str, targets)])

    print("\n[Ruff] check\n")
    ruff_cmd = ["ruff", "check", *map(str, targets)]
    if not args.no_fix and not args.check_only:
        ruff_cmd.append("--fix")
    rc_check = run(ruff_cmd)

    if args.install_types:
        print("\n[Mypy] install types\n")
        run(["mypy", "--install-types", "--non-interactive", *map(str, targets)])

    print("\n[Mypy] type check\n")
    mypy_cmd = ["mypy", *args.mypy_args.split(), *map(str, targets)]
    rc_mypy = run(mypy_cmd)

    overall = max(int(rc_fmt != 0) if not args.no_format and not args.check_only else 0,
                  int(rc_check != 0),
                  int(rc_mypy != 0))
    print("\n---- Python Summary ----")
    print("Ruff format :", "OK" if rc_fmt == 0 else "ISSUES")
    print("Ruff check  :", "OK" if rc_check == 0 else "ISSUES")
    print("Mypy        :", "OK" if rc_mypy == 0 else "ISSUES")
    print("------------------------\n")
    sys.exit(1 if overall else 0)

if __name__ == "__main__":
    main()

{% endraw %}