import os
import pathlib
import subprocess
import sys
import importlib
import shutil

project_root = pathlib.Path(__file__).resolve().parent
sys.path.insert(0, str(project_root))

from get_dependencies import get_setup_dependencies  # adjust path as needed

def is_package_installed(package_name):
    try:
        importlib.import_module(package_name)
        return True
    except ImportError:
        return False

def install_package(package, version, use_uv=True):
    spec = f"{package}=={version}" if version != "Not available" else package
    try:
        if use_uv:
            subprocess.run([sys.executable, "-m","uv", "pip", "install", spec], check=True)
        else:
            subprocess.run([sys.executable, "-m", "pip", "install", spec], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Failed to install {spec}: {e}")

def main():
    print("Checking and installing dependencies...")
    os.chdir(project_root)

    installed_packages = get_setup_dependencies(folder_path=str(project_root))
    use_uv = shutil.which("uv") is not None

    for package, version in installed_packages.items():
        if not is_package_installed(package):
            print(f"Installing missing package: {package}=={version}")
            install_package(package, version, use_uv=use_uv)
        else:
            print(f"{package} already installed.")

if __name__ == "__main__":
    main()
