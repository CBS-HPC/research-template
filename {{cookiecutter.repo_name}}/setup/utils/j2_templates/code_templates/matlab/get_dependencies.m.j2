{% raw %}
function requiredToolboxes = get_dependencies(folder_path, file_name)
    if nargin < 1
        folder_path = mfilename('fullpath');
    end
    if nargin < 2
        file_name = "dependencies.txt";
    end

    folder_path = fileparts(folder_path);
    depFile = fullfile(folder_path, file_name);

    mFiles = dir(fullfile(folder_path, '**', '*.m'));
    mlxFiles = dir(fullfile(folder_path, '**', '*.mlx'));
    allCodeFiles = [mFiles; mlxFiles];

    allFiles = {};
    allProducts = [];
    fileReports = cell(size(allCodeFiles));

    for i = 1:length(allCodeFiles)
        filePath = fullfile(allCodeFiles(i).folder, allCodeFiles(i).name);
        try
            fprintf("Analyzing dependencies for: %s\n", filePath);
            [files, products] = matlab.codetools.requiredFilesAndProducts(filePath);

            allFiles = [allFiles, files];
            allProducts = [allProducts, products];
            fileReports{i} = struct('path', filePath, 'status', 'OK', 'message', '');
        catch ME
            fprintf("Skipping due to syntax error: %s\n", filePath);
            fprintf("%s\n", ME.message);
            fileReports{i} = struct('path', filePath, 'status', 'ERROR', 'message', ME.message);
        end
    end

    % Collect unique product names and versions
    productNames = string({allProducts.Name});
    productVersions = string({allProducts.Version});
    [~, ia] = unique(productNames);
    uniqueProducts = containers.Map(productNames(ia), productVersions(ia));
    requiredToolboxes = cellstr(productNames(ia));  % <--- THIS is the new return value

    % Write dependencies to file
    fid = fopen(depFile, 'w');
    if fid == -1
        error("Unable to create %s in the specified folder.", file_name);
    end

    fprintf(fid, "Software version:\n");
    fprintf(fid, "MATLAB version: %s\n\n", version);
    fprintf(fid, "Timestamp: %s\n\n", datestr(now, 'yyyy-mm-dd HH:MM:SS'));

    fprintf(fid, "Files checked:\n");
    for i = 1:length(fileReports)
        relPath = erase(fileReports{i}.path, folder_path);
        relPath = strrep(relPath, filesep, '/');
        relPath = regexprep(relPath, '^/', '');
        if strcmp(fileReports{i}.status, 'OK')
            fprintf(fid, "%s\n", relPath);
        else
            fprintf(fid, "%s ERROR:\n %s\n", relPath, fileReports{i}.message);
        end
    end
    fprintf(fid, "\n");

    fprintf(fid, "Dependencies:\n");
    productKeys = keys(uniqueProducts);
    for i = 1:length(productKeys)
        fprintf(fid, "%s==%s\n", productKeys{i}, uniqueProducts(productKeys{i}));
    end

    fclose(fid);
    fprintf("%s successfully written in %s\n", file_name, depFile);
end
{% endraw %}